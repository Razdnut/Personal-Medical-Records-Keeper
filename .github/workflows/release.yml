name: Release

on:
  release:
    types: [published]

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install python-dotenv annotated-types

      - name: Get version from release
        id: get_version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Updating to version: $VERSION"

      - name: Update Python config version
        run: |
          python3 -c "
          import re

          # Read current config
          with open('app/core/config.py', 'r') as f:
              content = f.read()

          # Update version
          new_content = re.sub(
              r'VERSION: str = \"[^\"]*\"',
              f'VERSION: str = \"${{ steps.get_version.outputs.version }}\"',
              content
          )

          # Write back
          with open('app/core/config.py', 'w') as f:
              f.write(new_content)

          print('‚úÖ Updated app/core/config.py to version ${{ steps.get_version.outputs.version }}')
          "

      - name: Update frontend package.json version
        run: |
          cd frontend
          npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version
          echo "‚úÖ Updated frontend/package.json to version ${{ steps.get_version.outputs.version }}"

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add app/core/config.py frontend/package.json
          git commit -m "chore: bump version to ${{ steps.get_version.outputs.version }}" || echo "No changes to commit"
          git push
          echo "‚úÖ Committed version updates to repository"

      - name: Summary
        run: |
          echo "üéâ Release ${{ steps.get_version.outputs.version }} completed successfully!"
          echo "üìÅ Updated files:"
          echo "  - app/core/config.py"
          echo "  - frontend/package.json"
          echo "üê≥ Docker images will be built automatically by the existing workflow"
